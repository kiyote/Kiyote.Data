name: CI

on:
  workflow_dispatch:
  pull_request:
    paths:
    - '.github/workflows/ci.yml'
    - 'src/**'
    - 'test/**'
    - 'Kiyote.Data.sln'
    - 'Directory.Packages.props'
    - 'Directory.Build.props'
    - 'nuget.config'
    - 'db.sh'
  push:
    branches: [main]

env:
  DOTNET_VERSION: 8.0.412
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true

permissions:
  pull-requests: write
  contents: write

jobs:
  configure:
    name: Configure
    runs-on: [ubuntu-latest]
    outputs:
      MSSQL_SA_PASSWORD: ${{ steps.generate.outputs.MSSQL_SA_PASSWORD }}

    steps:
    - id: generate
      run: |
        echo "MSSQL_SA_PASSWORD=$(cat /dev/urandom | tr -dc _A-Za-z0-9 | head -c${1:-32})" >> $GITHUB_OUTPUT

  csharp:
    name: C#
    runs-on: [ubuntu-latest]
    timeout-minutes: 10
    needs: configure
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        ports:
        - 1433:1433
        env:
          ACCEPT_EULA: 'Y'
          MSSQL_SA_PASSWORD: ${{ needs.configure.outputs.MSSQL_SA_PASSWORD }}
    steps:
    - uses: actions/checkout@v4

    # Source:
    # https://learn.microsoft.com/en-us/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server?tabs=ubuntu18-install#18
    - name: Install sqlcmd on Linux
      if: runner.os == 'Linux' && steps.check-sqlcmd.outputs.available != 'true'
      shell: bash
      run: |
        curl https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
        sudo apt-get update
        sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18 mssql-tools18
        echo 'export PATH="$PATH:/opt/mssql-tools18/bin"' >> ~/.bashrc
        source ~/.bashrc
        echo '/opt/mssql-tools18/bin' >> $GITHUB_PATH

    - name: Wait for DB
      shell: bash
      run: ${{ github.workspace }}/db.sh
      env:
        MSSQL_SA_PASSWORD: ${{ needs.configure.outputs.MSSQL_SA_PASSWORD }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Define global.json
      run: dotnet new globaljson --sdk-version ${{ env.DOTNET_VERSION }}

    - name: Compile and Test
      run: dotnet test /p:CollectCoverage=true /p:CoverletOutput=TestResults/ /p:CoverletOutputFormat=cobertura
      env:
        KIYOTE__DATA__SQLSERVER__DATASOURCE: 'localhost'
        KIYOTE__DATA__SQLSERVER__USERID: 'sa'
        KIYOTE__DATA__SQLSERVER__PASSWORD: ${{ needs.configure.outputs.MSSQL_SA_PASSWORD }}
        KIYOTE__DATA__SQLSERVER__INITIALCATALOG: 'TESTING'
        KIYOTE__DATA__SQLSERVER__CONNECTIONSTRINGPROVIDER: 'Builder'
          
    - name: Create tool manifest
      run: dotnet new tool-manifest
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}

    - name: Install dotnet-coverage
      run: dotnet tool install dotnet-coverage
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}

    - name: Generate coverage file
      run: dotnet dotnet-coverage merge -o coverage.xml **/coverage.cobertura.xml -f cobertura
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}

    - name: Create Orphan Branch
      shell: bash
      run: ${{ github.workspace }}/create-orphan-branch.sh badges ${{ github.ref_name }}

    - name: Make Coverage Badge      
      uses: action-badges/cobertura-coverage-xml-badges@0.3.1
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      with:
        file-name: coverage.svg
        badge-branch: badges
        github-token: '${{ secrets.GITHUB_TOKEN }}'
        coverage-file-name: ./coverage.xml    
